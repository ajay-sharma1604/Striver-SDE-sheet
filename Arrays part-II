Question1 ) Rotate Matrix

leetcode-48
https://leetcode.com/problems/rotate-image/description/

->Brute Force //T.C- O(n^2) S.C-O(n^2)

public class RotateMatrix {

    public static void rotateArray(int matrix[][]) {
        int arr[][] = new int[matrix.length][matrix.length];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                arr[j][arr.length - 1 - i] = matrix[i][j];
            }
        }
    }

    public static void main(String[] args) {
        int matrix[][] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
        rotateArray(matrix);
    }
}


->Optimized Approach //T.C- O(n^2) S.C-O(1)

public class RotateMatrix {

    public static void rotateArray(int matrix[][]) {
        // step-1 Transpose Matrix
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i + 1; j < matrix.length; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // reverse each row
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length / 2; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix.length - 1 - j];
                matrix[i][matrix.length - 1 - j] = temp;
            }
        }
    }

    public static void main(String[] args) {
        int matrix[][] = { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 } };
        rotateArray(matrix);
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Question2 Merge Intervals
leetcode-56
https://leetcode.com/problems/merge-intervals/

//T.c -O(nlogn)
//S.c = O(n)
import java.util.*;

public class MergeIntervals {

    public static int[][] mergeIntervals(int intervals[][]) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        ArrayList<int[]> list = new ArrayList<>();

        for (int[] interval : intervals) {
            if (list.size() == 0) {
                list.add(interval);
            } else {
                int prevInterval[] = list.get(list.size() - 1);
                if (interval[0] <= prevInterval[1]) {
                    prevInterval[1] = Math.max(prevInterval[1], interval[1]);
                } else {
                    list.add(interval);
                }
            }
        }
        return list.toArray(new int[list.size()][]);
    }

    public static void main(String[] args) {
        int matrix[][] = {{1,3},{2,6},{8,9},{9,11},{8,10},{2,4},{15,18},{16,17} };
       matrix =  mergeIntervals(matrix);

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Question 3 Merge Sorted Array
leetcode- 88
https://leetcode.com/problems/merge-sorted-array/


//time complexity is O(m + n), and the space complexity is O(1).
public class MergeSortedArrays {
    public static void merge(long num1[], long num2[], int n, int m) {
        int i = n - 1;
        int j = m - 1;
        int k = n + m - 1;

        while (i >= 0 && j >= 0) {
            if (num1[i] > num2[j]) {
                num1[k] = num1[i];
                k--;
                i--;
            } else {
                num1[k] = num2[j];
                k--;
                j--;
            }
        }

        // if elements are remaining in num2, copy directly to num1
        while (j >= 0) {
            num1[k] = num2[j];
            k--;
            j--;
        }
    }

    public static void main(String[] args) {
        long[] num1 = { 1, 2, 3, 0, 0, 0 }; // make sure num1 has enough space for merginf
        long[] num2 = { 2, 5, 6 };
        int n = 3;
        // num1 size
        int m = 3;// num2 size
        merge(num1, num2, n, m);
        // print num1
        for (int i = 0; i < num1.length; i++) {
            System.out.print(num1[i] + " ");
        }
        System.out.println();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Quetsion 4 Find Duplicate Number
leetcode-287
https://leetcode.com/problems/find-the-duplicate-number/description/

 //T.c=  O(nlogn), S.c= O(1)
import java.util.Arrays;
public class Findduplicate {
    public static int findDuplicate(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i <= n-1; i++) {
        if (nums[i] == nums[i+1]) {
        return nums[i];
        }
        }
        return -1;
    }

    public static void main(String[] args) {
        int nums[] = { 3, 3, 3, 3, 3 };
        System.out.println(findDuplicate(nums));
    }
}

 //t.c- O(n), S.c- O(n)
import java.util.HashSet;
public class Findduplicate {
    public static int findDuplicate(int[] nums) {

        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            if(!set.add(num)){
                return num;
            };
        }
        return -1;
    }
    public static void main(String[] args) {
        int nums[] = { 3, 3, 3, 3, 3 };
        System.out.println(findDuplicate(nums));
    }
}


 //T.c- O(n), S.c- O(1)
import java.util.HashSet;
public class Findduplicate {
    public static int findDuplicate(int[] nums) {
        //linked-list cycle method + Tortoise Method
        int slow = nums[0];
        int fast = nums[0];
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);

        fast = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
    public static void main(String[] args) {
        int nums[] = { 3, 3, 3, 3, 3 };
        System.out.println(findDuplicate(nums));
    }
}

-----------------------------------------------------------------------------------------------------------------
Question 5 Repeated and Missing number

//T.c- O(n), S.c- O(n)

import java.util.ArrayList;
import java.util.HashSet;

public class RepeatedMissing {

    public static ArrayList<Integer> repeatedMissing(ArrayList<Integer> list) {

        // repeated
        HashSet<Integer> set = new HashSet<>();
        int repeated = -1;
        for (int num : list) {
            if (!set.add(num)) {
                repeated = num;
                break;
            }
        }

    // missing
    int n = list.size();
    long expectedSum = (long)n * (n + 1) / 2;
    long actualSum = 0;
    for (int num : list) {
        if(num!=repeated){
            actualSum += num;
        }
    }
    actualSum =actualSum+repeated;

    // Fix for overflow: subtract repeated number only once
    long missing = expectedSum - actualSum;

        // print
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(repeated);
        ans.add((int)missing);

        return ans;
    }

    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(3);
        list.add(1);
        list.add(2);
        list.add(5);
        list.add(3);

        ArrayList<Integer> result = repeatedMissing(list);
        System.out.println(result);
    }
}


//T.c- O(n), S.c- O(1)

import java.util.ArrayList;
import java.util.HashSet;

public class RepeatedMissing {

    public static ArrayList<Integer> repeatedMissing(ArrayList<Integer> list) {
        long n = list.size();
        // find sn and s2n-ensure long to prevent overflow
        long sn = (n * (n + 1)) / 2;
        long s2n = (n * (n + 1) * (2 * n + 1)) / 6;

        // find s and s2
        long s = 0, s2 = 0;
        for (int i = 0; i < n; i++) {
            s += list.get(i);
            s2 += (long)list.get(i) *(long) list.get(i);
        }

        // s-sn =x-y
        long val1 = s -sn;

        // s2-s2n = x^2- y^2
        long val2 = s2 - s2n;

        // find x+y =(x^2-y^2)/(x-y)
        val2 = val2 / val1;

        // find x and y , val1+ val2/2
        long x = (val1 + val2) / 2;
        long y = x - val1; //val2-x

        // print
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add((int)x);
        ans.add((int) y);

        return ans;
    }

    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(3);
        list.add(1);
        list.add(2);
        list.add(5);
        list.add(3);

        ArrayList<Integer> result = repeatedMissing(list);
        System.out.println(result);
    }
}
-----------------------------------------------------------------------------------------------------------------


