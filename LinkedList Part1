Quetstion1)
Reverse a Linked List
https://leetcode.com/problems/reverse-linked-list/

//t.c- O(n)
//s.c-O(1)

class Solution {
    public ListNode reverseList(ListNode head) {
      ListNode prev =null;
      ListNode curr =head;
      ListNode nextNode =null;

      while(curr!=null){
        nextNode =curr.next;
        curr.next =prev;
        prev=curr;
        curr=nextNode;
      }
      return prev;
    }
}
-----------------------------------------------------------------------------------------------------------------
Question 2) Find middle of Linked List
https://leetcode.com/problems/middle-of-the-linked-list/

-------------------------Brute
//t.c- O(n+n/2)
//s.c-O(1)

class Solution {
    public ListNode middleNode(ListNode head) {

        // //base case
        // if(head==null || head.next==null){
        //     return head;
        // }
        //step1-counting nodes
        ListNode temp =head; int count=0;
        while(temp!=null){
            count+=1;
            temp=temp.next;
        }

        //step2-calculate mid value i
        int mid =(count/2)+1;
    
        //step3- reaching desired mid node
        temp=head;
        while(temp!=null){
            mid=mid-1;
            if(mid==0){
                break;
            }
            temp=temp.next;
        }
         return temp;
    }
}

-------------------------Optimal

//t.c- O(n/2)
//s.c-O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
     ListNode slow =head;
     ListNode fast =head;
     while(fast!=null && fast.next!=null){
        slow=slow.next;
        fast=fast.next.next;
     }
     return slow;
    }
  
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
question 3) Merge Two Sorted Lists

//brute force
class Solution {
    public static ListNode convertarrtoll(ArrayList<Integer>arr){
        ListNode dummy =new ListNode(-1);
        ListNode temp =dummy;

        for(int i=0;i<arr.size();i++){
            temp.next = new ListNode(arr.get(i));
            temp=temp.next;
        }
        return dummy.next;
    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ArrayList<Integer> arr =new ArrayList<>();
        ListNode temp1 =list1;
        ListNode temp2 =list2;

        //storing both lists in arraylist
        while(temp1!=null){
            arr.add(temp1.val);
            temp1 =temp1.next;
        }
        while(temp2!=null){
            arr.add(temp2.val);
            temp2 =temp2.next;
        }

        //sort arraylist
        Collections.sort(arr);

        ListNode head = convertarrtoll(arr);

         return head;
    }
}

------------------------Optimal

