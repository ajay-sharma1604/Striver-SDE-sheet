Quetstion1)
Reverse a Linked List
https://leetcode.com/problems/reverse-linked-list/

//t.c- O(n)
//s.c-O(1)

class Solution {
    public ListNode reverseList(ListNode head) {
      ListNode prev =null;
      ListNode curr =head;
      ListNode nextNode =null;

      while(curr!=null){
        nextNode =curr.next;
        curr.next =prev;
        prev=curr;
        curr=nextNode;
      }
      return prev;
    }
}
-----------------------------------------------------------------------------------------------------------------
Question 2) Find middle of Linked List
https://leetcode.com/problems/middle-of-the-linked-list/

-------------------------Brute
//t.c- O(n+n/2)
//s.c-O(1)

class Solution {
    public ListNode middleNode(ListNode head) {

        // //base case
        // if(head==null || head.next==null){
        //     return head;
        // }
        //step1-counting nodes
        ListNode temp =head; int count=0;
        while(temp!=null){
            count+=1;
            temp=temp.next;
        }

        //step2-calculate mid value i
        int mid =(count/2)+1;
    
        //step3- reaching desired mid node
        temp=head;
        while(temp!=null){
            mid=mid-1;
            if(mid==0){
                break;
            }
            temp=temp.next;
        }
         return temp;
    }
}

-------------------------Optimal

//t.c- O(n/2)
//s.c-O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
     ListNode slow =head;
     ListNode fast =head;
     while(fast!=null && fast.next!=null){
        slow=slow.next;
        fast=fast.next.next;
     }
     return slow;
    }
  
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
question 3) Merge Two Sorted Lists

//brute force
class Solution {
    public static ListNode convertarrtoll(ArrayList<Integer>arr){
        ListNode dummy =new ListNode(-1);
        ListNode temp =dummy;

        for(int i=0;i<arr.size();i++){
            temp.next = new ListNode(arr.get(i));
            temp=temp.next;
        }
        return dummy.next;
    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ArrayList<Integer> arr =new ArrayList<>();
        ListNode temp1 =list1;
        ListNode temp2 =list2;

        //storing both lists in arraylist
        while(temp1!=null){
            arr.add(temp1.val);
            temp1 =temp1.next;
        }
        while(temp2!=null){
            arr.add(temp2.val);
            temp2 =temp2.next;
        }

        //sort arraylist
        Collections.sort(arr);

        ListNode head = convertarrtoll(arr);

         return head;
    }
}

------------------------Optimal
//t.c-O(N1+N2)
//s.c-O(1)
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy =new ListNode(-1);
        ListNode temp =dummy;
        while(list1!=null && list2!=null){
            if(list1.val<list2.val){
                temp.next =list1;
                list1 =list1.next;
            }
            else{
                temp.next =list2;
                list2 =list2.next;
            }

            temp =temp.next;
        }

        if(list1!=null){
            temp.next= list1;
        }
        else{
            temp.next= list2;
        }

        return dummy.next;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------

question 4)

Remove Nth Node From End of List
https://leetcode.com/problems/remove-nth-node-from-end-of-list/

//Brute Force
//t.c- O(L) + O(L-N)
//s.c- O(1)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int count = 0;
        ListNode temp = head;

        //base case- ll is empty
        if(head==null){
            return  null;
        }
         
        //calculate count
        while(temp!=null){
            count++;
            temp=temp.next;
        }

        //special case
        if(count==n){   //i.e remove head
            ListNode newHead =head.next;
            head =null;
            return newHead;
        }

        //find previous of targeted node
        int result = count-n;
        temp = head;

        //reaching previous node of tar node
        while(temp!=null){
            result--;
            if(result==0){
                break;
            }
            temp =temp.next;    //temp is the prev node
        }

        ListNode tarNode = temp.next;
        temp.next =temp.next.next;
        tarNode =null;
        return head;
    }
}


//optimal solution

//t.c- O(n) -fastpointer will traverse the entire ll, n=length of ll
//s.c- O(1)

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast =head;
        for(int i=0;i<n;i++){
            fast=fast.next;
        }

        //special case
        if(fast == null){ //from end we need to delete head
            return head.next;
        }

        ListNode slow =head;
        while(fast.next!=null){
            slow= slow.next;
            fast=fast.next;
        }

        //delete node next to slow(prev) node   
        ListNode tarNode = slow.next;
        slow.next =slow.next.next;
        tarNode =null;
        return head;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Question 5)
