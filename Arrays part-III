Question1 

74 Search a 2D Matrix
https://leetcode.com/problems/search-a-2d-matrix/description/?submissionId=1250899578
//tc =0(n)
//sc- 0(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
    
       int requiredRow = -1;
        for (int row = 0; row < matrix.length; row++) {
            if (matrix[row][matrix[row].length - 1] >= target) {
                requiredRow = row;
                break;
            }
        }

        // Target is smaller than all elements in the first column-target not exist
        if (requiredRow == -1) {
            return false; 
        }

        //searching in required row
        for(int i=0; i<matrix[requiredRow].length;i++){
            if(matrix[requiredRow][i]==target){
                return true;
            }
        }
        return false;  
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question2

50 Pow(x,n)
https://leetcode.com/problems/powx-n/

//t.c- O(logn)
//s.c-O(1)
class Solution {
    public double myPow(double x, int n) {
         if (n == 0) return 1;

        double res=1;
        long val =Math.abs((long)n);
         while(val>0){
           if((val&1)!=0){
            res=res*x;
           }
           x =x*x;
           val=val>>1;
        }
    
    return n<0 ? 1/res:res;
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
