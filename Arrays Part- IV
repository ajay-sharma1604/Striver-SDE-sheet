Question 1)
1. Two Sum
https://leetcode.com/problems/two-sum/

//t.c- O(n^2)
//s.c-O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[]=new int[2];
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                     arr[0]= i;
                     arr[1]=j;
                     break;
                }
            }
        }
        return arr;
    }
}


//t.c- O(n)
//s.c-O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
      int ans[]=new int[2];
      HashMap<Integer,Integer>map =new HashMap<>();
      for(int i=0;i<nums.length;i++){
        int diff =target- nums[i];
        if(map.containsKey(diff)) {
            ans[0]= map.get(diff);
            ans[1]= i;
            break;
        }
        else{
            map.put(nums[i],i);
        }
      }
        return ans;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Question 2)
18. 4Sum
https://leetcode.com/problems/4sum/description/

//t.c-O(n^3)
//s.c-O(1)

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
      List<List<Integer>>ans= new ArrayList<>();
      int n=nums.length;
      //sort array
      Arrays.sort(nums);
      for(int i=0;i<n;i++){
        if(i>0 && nums[i]==nums[i-1]){
            continue;
        }
        for(int j=i+1;j<n;j++){
            if(j>i+1 && nums[j]==nums[j-1]){
                continue;
            }
            int k=j+1;
            int l=n-1;
            while(k<l){
                long sum =(long)nums[i]+nums[j]+nums[k]+nums[l];
                if(sum==target){
                    List<Integer>temp =new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    temp.add(nums[l]);
                    ans.add(temp);
                     k++;
                     l--;

                    while (k < l && nums[k] == nums[k - 1]) k++;
                    while (k < l && nums[l] == nums[l + 1]) l--;
                }
                else if(sum<target){
                    k++;
                }
                else{
                    l--;
                }
            }
        }
      }
      return ans;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 3)
128 Longest Consecutive Sequence
https://leetcode.com/problems/longest-consecutive-sequence/

//optimised- t.c- O(n), s.c-O(n)

class Solution {
    public int longestConsecutive(int[] nums) {
         if(nums.length==0){
            return 0;
        }
        HashSet<Integer>set =new HashSet<>();
        int max =Integer.MIN_VALUE;

        //PUT ALL ELE IN SET
        for(int i=0;i<nums.length;i++){
            set.add(nums[i]);
        }

        for (int val : set) {
            if(!set.contains(val-1)){
                int count =1;
                int x =val;
                
                while(set.contains(x+1)){
                    count++;
                    x=x+1;
                }

                max =Math.max(max,count);
            }
        }
        return max;
    }
}


//t.c- O(nlogn)
//s.c-O(1)

class Solution {
    public int longestConsecutive(int[] nums) {
        int maxCount =Integer.MIN_VALUE;
        Arrays.sort(nums);
        int x = 0;
        int count =0;
        if(nums.length == 0){
            return 0;
        }
        for(int k=0;k<nums.length-1;k++){
            if(nums[k] == nums[k+1]){
                continue;
            }
           if(nums[k]+1==nums[k+1] ){
            count++;
            x = count;//for last
            continue;
           }
             maxCount= Math.max(x,maxCount);
             count=0;
        }
        int val = Math.max(maxCount,x);
        return val +1;
    }
}  


or

class Solution {
    public int longestConsecutive(int[] nums) {
        int maxCount =Integer.MIN_VALUE;
        Arrays.sort(nums);
        int x = 0;
        int count =0;
        if(nums.length == 0){
            return 0;
        }
        for(int k=1;k<nums.length;k++){
            if(nums[k] == nums[k-1]){
                continue;
            }
           if(nums[k]-1==nums[k-1] ){
            count++;
            x = count;//for last
            continue;
           }
             maxCount= Math.max(x,maxCount);
             count=0;
        }
        int val = Math.max(maxCount,x);
        return val +1;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 4) 
Largest Subarray with K sum

//time limit exceeded
package Arrays4;
public class LargestSubarray {

    public static int maxLen(int arr[], int N){
        int maxCount =0;
        for(int i=0;i<arr.length;i++){
            int sum =0;
            int count=0;
            for(int j=i;j<arr.length;j++){
                sum=sum+arr[j];
                count++;
                if(sum==0){
                    maxCount= Math.max(maxCount,count);
                }
            }
        }
        return maxCount;
    }
    public static void main(String[] args) {
        int arr[]= {15,-2,2,-8,1,7,10,23};
        int N= arr.length;
        System.out.println(maxLen(arr,N));
    }
}

//optimised approach
//t.c-O(n)
//s.c-O(n)

class GfG
{
    int maxLen(int arr[], int n)
    { HashMap<Integer, Integer> sumMap = new HashMap<>();
        
        int maxLen = 0;
        int currSum = 0;
        
        for (int i = 0; i < n; i++) {
            currSum += arr[i];
            if (currSum == 0) {
                maxLen = i + 1;
            }
            
            if (sumMap.containsKey(currSum)) {
                maxLen = Math.max(maxLen, i - sumMap.get(currSum));
            } else {
                sumMap.put(currSum, i);
            }
        }
        
        return maxLen;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 5
Subarray with given XOR

//t.c-O(n)
//s.c-O(n)

public class Solution {
    public int solve(int[] A, int B) {
        int n =A.length;
        int xr= 0;
        HashMap<Integer,Integer>map =new HashMap<>();
        map.put(xr,1);
        int count=0;
        
        for(int i=0;i<n;i++){
            xr=xr^A[i];
            int x =xr^B;
            if(map.containsKey(x)){
                count+=map.get(x);
            }
            
            if(map.containsKey(xr)){
                map.put(xr, map.get(xr)+1);
            }
            else{
                map.put(xr,1);
            }
        }
        return count;
    }
}

