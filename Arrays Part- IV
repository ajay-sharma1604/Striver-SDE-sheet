Question 1)
1. Two Sum
https://leetcode.com/problems/two-sum/


//t.c- O(n^2)
//s.c-O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[]=new int[2];
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                     arr[0]= i;
                     arr[1]=j;
                     break;
                }
            }
        }
        return arr;
    }
}


//t.c- O(n)
//s.c-O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
      int ans[]=new int[2];
      HashMap<Integer,Integer>map =new HashMap<>();
      for(int i=0;i<nums.length;i++){
        int diff =target- nums[i];
        if(map.containsKey(diff)) {
            ans[0]= map.get(diff);
            ans[1]= i;
            break;
        }
        else{
            map.put(nums[i],i);
        }
      }
        return ans;
    }
}
-----------------------------------------------------------------------------------------------------------------------------

