Question 1)
1. Two Sum
https://leetcode.com/problems/two-sum/

//t.c- O(n^2)
//s.c-O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[]=new int[2];
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                     arr[0]= i;
                     arr[1]=j;
                     break;
                }
            }
        }
        return arr;
    }
}


//t.c- O(n)
//s.c-O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
      int ans[]=new int[2];
      HashMap<Integer,Integer>map =new HashMap<>();
      for(int i=0;i<nums.length;i++){
        int diff =target- nums[i];
        if(map.containsKey(diff)) {
            ans[0]= map.get(diff);
            ans[1]= i;
            break;
        }
        else{
            map.put(nums[i],i);
        }
      }
        return ans;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Question 2)
18. 4Sum
https://leetcode.com/problems/4sum/description/

//t.c-O(n^3)
//s.c-O(1)

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
      List<List<Integer>>ans= new ArrayList<>();
      int n=nums.length;
      //sort array
      Arrays.sort(nums);
      for(int i=0;i<n;i++){
        if(i>0 && nums[i]==nums[i-1]){
            continue;
        }
        for(int j=i+1;j<n;j++){
            if(j>i+1 && nums[j]==nums[j-1]){
                continue;
            }
            int k=j+1;
            int l=n-1;
            while(k<l){
                long sum =(long)nums[i]+nums[j]+nums[k]+nums[l];
                if(sum==target){
                    List<Integer>temp =new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[k]);
                    temp.add(nums[l]);
                    ans.add(temp);
                     k++;
                     l--;

                    while (k < l && nums[k] == nums[k - 1]) k++;
                    while (k < l && nums[l] == nums[l + 1]) l--;
                }
                else if(sum<target){
                    k++;
                }
                else{
                    l--;
                }
            }
        }
      }
      return ans;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

